We will be building the pattern behind a shopping cart

Lets install Bootstrap in VS Code to give our apps a modern look and feel.

To install:
  sudo npm i bootstrap

Add a src/components folder.  By convention our components will go here.
Add a src/components/counter.jsx .  Remember that we camelCase these jsx files.

Using the Simple React Snippets VS Code extension we already set up, we can use the shortcut "imrc" and then "cc" to get our file set up easily.  

TIP:  In VS Code, you can get out of double cursor mode by pressing ESC.

Now we can add some code to our Counter component, import it into index.js, and then pass it in the render call.

Now when we embed more information in our Counter return call, we must pay attention to JSX rules; all JSX expressions require one parent element.  To get around this, we can surround our JSX with <div></div>, or more cleanly, use <React.Fragment></React.Fragment>.

Rendering classes dynamically can be done by using { } and a function to decide the class to render.  This is easily done by using string operations and conditionals.

Rendering arrays dynamically using the list item tag like: { this.state.items.map(item => <li key={tag}>{ item }</li>) } .  We must use key={ } with a unique id.  In this example they are unique, but our array might be of objects that have unique id's.  

In JavaScript because you can apply the logical "and" to non boolean values, you can have an expression like:

  {this.state.tags.length === 0 && "Please create new tag"}

In this, JavaScript is evaluating the left, finding a boolean, and then evaluating the right.  An empty string is considered falsey, and a string with at least one character is considered truthy.  Thus the second term is returned from the expression giving us the result shown in the browser.

To bind handlers, we need to add the following method:

  constructor() {
    super();
    // binding here
    this.handleIncrement = this.handleIncrement.bind(this);
  }

Now we have access to 'this' and thus state inside of our handleIncrement function.

An experimental way that is cleaner to do this is by using "arrow" functions.  This way we do not have to use the constructor function.

  handleIncrement = () => {
    this.setState({ count: this.state.count + 1 });
  };

We use the setState function that is built-in and we can access the state we want to update by simply in the JSX using its name.  In this example we used ' count '.

For passing event arguments, we can do the following:

  handleIncrement = (product) => {
    console.log(product);
    this.setState({ count: this.state.count + 1 });
  };

  doHandleIncrement = () => {
    this.handleIncrement({ id: 1 });
  };

We can even go as far as to clean up our code to not have a "do" for our events, but instead:

  <button
    onClick={ () => this.handleIncrement({ id: 1 }) }
    className="btn btn-secondary btn-sm"
  >

Here we don't have an entirely other function, we just do it inline.  This allows us to provide information about the event.

Now lets move on to start building some of our React tree for this example.  First lets add a src/components/counters.jsx file.

Now our component tree looks like this:

                 ----------------
                 |  components  |
                 ----------------

                     Counters
                        |
                        V
                     Counter

In order to pass data to components, we can use the builtin "this.props" object.  In Counters, we can have:

  <Counter key={counter.id} value={counter.value} whatever={thing} />

Meanwhile in Counter:

  state = {
    value: this.props.value
  };

To specify children (a React element) we can expand the Counter tag and have something of this form:

  <Counter key=.....   >
    <h4>Title</h4>
  </Counter>

We can render this in Counter by simply having:

  <div>
    {this.props.children}
    <span .........
    <button ......
  </div>

We can make this "Title" dynamically using JSX:

  <h4>Counter #{counter.id}</h4>

This gives "Counter #1" and so on.
Props includes data we give to a component, whereas state includes data that is local/private to the component.  Thus the one way data flow is seen and realized here.

*NOTE* React does NOT allow you to edit the input properties on a component.  To do this, we must use state, and deal with state when "updating" information.  Thus, we get the axiom that the component that owns the piece of the state, should be the one modifying it.


Okay, now for deletion of an item we want to remember a few things:
  - We have a map between the counters state and the counters children.  Changing the state will change the children
  - We want to use setState only when we are updating the component's state
  - We want the parent to be the one deleting the child

So we give the child a property called onDelete which equals a function ref in the parent for handleDelete.  Then, in handleDelete, we will take a specific parameter id, and create a new array using the array filter method.  It'll look like this:

  handleDelete = (counterId) => {
    const counters = this.props.counters.filter((c) => c.id !== counterId);
    this.setState({ counters });
  };

We can even clean up our child creation so that we don't have to deal with messiness (think if we had lots of props we wanted to give our child) so instead we can simply have this:

  <Counter
    key={counter.id}
    counter={counter}
    onDelete={this.handleDelete}
  />

We have a problem in our implementation however, we do no have a single source of truth.  If we update value in our Counters component, it isn't updated within Counter's state.  So we need to remove value from Counter's state.

So we need to refactor our increment method to instead raise an event that is handled in the parent :)

Then, our implementation of handleIncrement will look like this:

  handleIncrement = (counter) => {
    const counters = [...this.state.counters];
    const index = counters.indexOf(counter);
    counters[index] = { ...counter };
    counters[index].value++;
    this.setState({ counters });
  };

So passing in the counter object is a TON cleaner than passing an id, because then we have to search and return the object with that id instead of leveraging the builtin indexOf method.  This should be the way usually.  For deletion, we can even pass the counter object and then filter based on its id.  

Now lets add a Nav bar.  This requires changing the component structure to something which will look like this:

               App
                |
       -------------------
       |                 |
     NavBar           Counters
                         |
                         |
                         |
                      Counter

Our NavBar has no state or functions, so we can convert it to a "Stateless Functional Component".  To do this we simply do the following for SFC's:

  import React from "react";

  const NavBar = () => {
    ...
  };

  export default NavBar;

To pass information to this component, we can do what we've always done with arrow functions, but if we use Object Destructuring, we can clean our code.  This is especially helpful if we're only interested in one or two things from the object.  This is done with the following declaration:

  const NavBar = ({ totalCounters }) => {
    return (
      <nav className="navbar navbar-light bg-light">
        <a className="navbar-brand" href="#">
          Navbar{" "}
          <span className="badge bg-pill bg-secondary">
            {totalCounters}
          </span>
        </a>
      </nav>
    );
  }


